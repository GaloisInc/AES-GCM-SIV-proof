diff --git a/AES_GCM_SIV_128/AES_GCM_SIV_128_Performance_Code/Makefile b/AES_GCM_SIV_128/AES_GCM_SIV_128_Performance_Code/Makefile
index bdfd60e..faf54fc 100644
--- a/AES_GCM_SIV_128/AES_GCM_SIV_128_Performance_Code/Makefile
+++ b/AES_GCM_SIV_128/AES_GCM_SIV_128_Performance_Code/Makefile
@@ -1,9 +1,10 @@
-GCC = /usr/intel/pkgs/gcc/5.2.0/bin/gcc -mpclmul -O3 -maes  -mavx -w
+GCC = gcc -mpclmul -O3 -maes  -mavx -w
 ICC = icc
 FLAGS = -DRDTSC
 DEF= -DDETAILS -DADD_INFO
 #DEF= -DCOUNT
 FLAGS += -Wa,-q
+FLAGS += -no-pie
 
 ALL:  GHASH 
 	
diff --git a/AES_GCM_SIV_128/AES_GCM_SIV_128_Reference_Code/GCM_SIV_c.c b/AES_GCM_SIV_128/AES_GCM_SIV_128_Reference_Code/GCM_SIV_c.c
index 571a400..7f25fa3 100755
--- a/AES_GCM_SIV_128/AES_GCM_SIV_128_Reference_Code/GCM_SIV_c.c
+++ b/AES_GCM_SIV_128/AES_GCM_SIV_128_Reference_Code/GCM_SIV_c.c
@@ -61,6 +61,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include "aes_emulation.h"
+#include "clmul_emulator.h"
 
 #if !defined (ALIGN16)
 #if defined (__GNUC__)
@@ -109,47 +110,19 @@ void AES_128_Key_Expansion(const unsigned char *userkey, uint32_t* ks)
 void AES_128_Encrypt(uint32_t* out, uint32_t* in, uint32_t* ks)
 {
     int i, j;
-    uint32_t s0, s1, s2, s3;
-    uint32_t t0, t1, t2, t3;
-    
-    s0 = in[0]^ks[0];
-    s1 = in[1]^ks[1];
-    s2 = in[2]^ks[2];
-    s3 = in[3]^ks[3];
+
+    out[0] = in[0]^ks[0];
+    out[1] = in[1]^ks[1];
+    out[2] = in[2]^ks[2];
+    out[3] = in[3]^ks[3];
     ks+=4;
-    
+
     for(i=0; i<9; i++)
     {
-        t0 = emulated_aesenc_enc_table_0[s0 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s1 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s2 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s3 >> 24) & 0xff];
-        t1 = emulated_aesenc_enc_table_0[s1 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s2 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s3 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s0 >> 24) & 0xff];	
-        t2 = emulated_aesenc_enc_table_0[s2 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s3 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s0 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s1 >> 24) & 0xff] ;
-        t3 = emulated_aesenc_enc_table_0[s3 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s0 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s1 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s2 >> 24) & 0xff];
-        s0 = t0^ks[0];
-        s1 = t1^ks[1];
-        s2 = t2^ks[2];
-        s3 = t3^ks[3];
+        emulated_aesenc(out,ks);
         ks+=4;
     }
-    out[0]=s0;out[1]=s1;out[2]=s2;out[3]=s3;
-    emulated_aesenc_row_shifting(out);
-	emulated_aesenc_substitute_bytes(out);
-  
-    out[0] ^= ks[0];
-    out[1] ^= ks[1];
-    out[2] ^= ks[2];
-    out[3] ^= ks[3];
+    emulated_aesenclast(out,ks);
 }
 
 void AES_128_CTR(uint8_t* out, uint8_t* in, uint32_t* CTR, int mlen, uint32_t* ks)
@@ -168,7 +141,7 @@ void AES_128_CTR(uint8_t* out, uint8_t* in, uint32_t* CTR, int mlen, uint32_t* k
         P+=4;
         C+=4;
         // CTR[3] = bswap_32(bswap_32(CTR[3]) + 1);
-		CTR[0] = ((CTR[0] +1) % (0xFFFFFFFF));
+		CTR[0] = CTR[0] + 1; // ((CTR[0] +1) % (0xFFFFFFFF));
     }
     if(i*16 < mlen)
     {
@@ -298,7 +271,7 @@ void GCM_SIV_ENC_2_Keys(uint8_t* CT, uint8_t TAG[16], uint8_t K1[16], uint8_t N[
 	POLYVAL(LENBLK, (uint64_t*)HASH_KEY, 16, POLYV);
 	#ifdef XOR_WITH_NONCE
 	((uint64_t*)POLYV)[0] ^= ((uint64_t*)N)[0];
-	((uint64_t*)POLYV)[1] ^= ((uint64_t*)N)[1];
+	((uint64_t*)POLYV)[1] ^= ((uint32_t*)N)[2];
 	#endif
 	((uint8_t*)POLYV)[15] &= 127;
 	
@@ -377,7 +350,7 @@ int GCM_SIV_DEC_2_Keys(uint8_t* MSG, uint8_t TAG[16], uint8_t K1[16], uint8_t N[
 	new_TAG[1] = T[1];
 	#ifdef XOR_WITH_NONCE
 	((uint64_t*)new_TAG)[0] ^= ((uint64_t*)N)[0];
-	((uint64_t*)new_TAG)[1] ^= ((uint64_t*)N)[1];
+	((uint64_t*)new_TAG)[1] ^= ((uint32_t*)N)[2];
 	#endif
 	((uint8_t*)new_TAG)[15] &= 127;
 	AES_128_Encrypt((uint32_t*)new_TAG, (uint32_t*)new_TAG, (uint32_t*)KS); 
diff --git a/AES_GCM_SIV_256/AES_GCM_SIV_256_Reference_Code/GCM_SIV_c.c b/AES_GCM_SIV_256/AES_GCM_SIV_256_Reference_Code/GCM_SIV_c.c
index f102ca0..e3444bc 100644
--- a/AES_GCM_SIV_256/AES_GCM_SIV_256_Reference_Code/GCM_SIV_c.c
+++ b/AES_GCM_SIV_256/AES_GCM_SIV_256_Reference_Code/GCM_SIV_c.c
@@ -61,6 +61,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include "aes_emulation.h"
+#include "clmul_emulator.h"
 
 #if !defined (ALIGN16)
 #if defined (__GNUC__)
@@ -120,45 +121,19 @@ void AES_256_Encrypt(uint32_t* out, uint32_t* in, uint32_t* ks)
     int i, j;
     uint32_t s0, s1, s2, s3;
     uint32_t t0, t1, t2, t3;
-    
-    s0 = in[0]^ks[0];
-    s1 = in[1]^ks[1];
-    s2 = in[2]^ks[2];
-    s3 = in[3]^ks[3];
+
+    out[0] = in[0]^ks[0];
+    out[1] = in[1]^ks[1];
+    out[2] = in[2]^ks[2];
+    out[3] = in[3]^ks[3];
     ks+=4;
-    
+
     for(i=0; i<13; i++)
     {
-        t0 = emulated_aesenc_enc_table_0[s0 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s1 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s2 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s3 >> 24) & 0xff];
-        t1 = emulated_aesenc_enc_table_0[s1 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s2 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s3 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s0 >> 24) & 0xff];	
-        t2 = emulated_aesenc_enc_table_0[s2 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s3 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s0 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s1 >> 24) & 0xff] ;
-        t3 = emulated_aesenc_enc_table_0[s3 & 0xff] ^ 
-             emulated_aesenc_enc_table_1[(s0 >> 8) & 0xff] ^ 
-             emulated_aesenc_enc_table_2[(s1 >> 16) & 0xff] ^ 
-             emulated_aesenc_enc_table_3[(s2 >> 24) & 0xff];
-        s0 = t0^ks[0];
-        s1 = t1^ks[1];
-        s2 = t2^ks[2];
-        s3 = t3^ks[3];
+        emulated_aesenc(out,ks);
         ks+=4;
     }
-    out[0]=s0;out[1]=s1;out[2]=s2;out[3]=s3;
-    emulated_aesenc_row_shifting(out);
-	emulated_aesenc_substitute_bytes(out);
-  
-    out[0] ^= ks[0];
-    out[1] ^= ks[1];
-    out[2] ^= ks[2];
-    out[3] ^= ks[3];
+  emulated_aesenclast(out,ks);
 }
 
 void AES_256_CTR(uint8_t* out, uint8_t* in, uint32_t* CTR, int mlen, uint32_t* ks)
@@ -177,7 +152,7 @@ void AES_256_CTR(uint8_t* out, uint8_t* in, uint32_t* CTR, int mlen, uint32_t* k
         P+=4;
         C+=4;
         // CTR[3] = bswap_32(bswap_32(CTR[3]) + 1);
-		CTR[0] = ((CTR[0] +1) % (0xFFFFFFFF));
+		CTR[0] = CTR[0] +1;
     }
     if(i*16 < mlen)
     {
@@ -265,7 +240,7 @@ void POLYVAL(uint64_t* input, uint64_t* H, uint64_t len, uint64_t* result)
 }
 
 
-void GCM_SIV_ENC_2_Keys(uint8_t* CT, uint8_t TAG[16], uint8_t K1[32], uint8_t N[16], uint8_t* AAD, uint8_t* MSG, 
+void GCM_SIV_ENC_2_Keys(uint8_t* CT, uint8_t TAG[16], uint8_t K1[32], uint8_t N[12], uint8_t* AAD, uint8_t* MSG, 
 						uint64_t AAD_len, uint64_t MSG_len)
 {
 	uint64_t T[2] = {0};
@@ -310,7 +285,7 @@ void GCM_SIV_ENC_2_Keys(uint8_t* CT, uint8_t TAG[16], uint8_t K1[32], uint8_t N[
 	POLYVAL(LENBLK, (uint64_t*)Record_Hash_Key, 16, T);    
 	#ifdef XOR_WITH_NONCE
 	((uint64_t*)T)[0] = ((uint64_t*)T)[0] ^ ((uint64_t*)N)[0];
-	((uint64_t*)T)[1] = ((uint64_t*)T)[1] ^ ((uint64_t*)N)[1];
+	((uint64_t*)T)[1] = ((uint64_t*)T)[1] ^ ((uint32_t*)N)[2];
 	#endif
 	((uint64_t*)TAG)[0] = T_masked[0] = T[0];
 	((uint64_t*)TAG)[1] = T_masked[1] = T[1];
@@ -340,7 +315,7 @@ void GCM_SIV_ENC_2_Keys(uint8_t* CT, uint8_t TAG[16], uint8_t K1[32], uint8_t N[
 
 
 
-int GCM_SIV_DEC_2_Keys(uint8_t* MSG, uint8_t TAG[16], uint8_t K1[32], uint8_t N[16], uint8_t* AAD, uint8_t* CT, 
+int GCM_SIV_DEC_2_Keys(uint8_t* MSG, uint8_t TAG[16], uint8_t K1[32], uint8_t N[12], uint8_t* AAD, uint8_t* CT, 
 						uint64_t AAD_len, uint64_t MSG_len)
 {
 	uint64_t T[2] = {0};
@@ -398,7 +373,7 @@ int GCM_SIV_DEC_2_Keys(uint8_t* MSG, uint8_t TAG[16], uint8_t K1[32], uint8_t N[
 	POLYVAL(LENBLK, (uint64_t*)Record_Hash_Key, 16, T);
 	#ifdef XOR_WITH_NONCE
 	((uint64_t*)T)[0] = ((uint64_t*)T)[0] ^ ((uint64_t*)N)[0];
-	((uint64_t*)T)[1] = ((uint64_t*)T)[1] ^ ((uint64_t*)N)[1];
+	((uint64_t*)T)[1] = ((uint64_t*)T)[1] ^ ((uint32_t*)N)[2];
 	#endif
 	new_TAG[0] = T[0];
 	new_TAG[1] = T[1];
