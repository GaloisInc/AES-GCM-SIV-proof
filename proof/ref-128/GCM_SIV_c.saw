
// From GCM_SIV_c.c
// Takes about 10 mins on my computer.
AES_128_Key_Expansion <-
  proof
    proving "AES_128_Key_Expansion"
    c_code
    "AES_128_Key_Expansion"
    []
    false
    do {
      (userkey, val_userkey) <- allocArrayIn "user" 16 i8;
      ks                     <- allocArrayOut "ks" 44 i32;
                                // 11 rounds, at 4 * 32 each
      crucible_execute_func [ userkey, ks ];
      pointsTo ks {{ flatSchedule (expand_key128 (join val_userkey)) }};
    }
    abc;


// Takes about 9 hours on my computer.
AES_128_Encrypt <-
  proof
    proving "AES_128_Encrypt"
    c_code
    "AES_128_Encrypt"
    [ emulated_aesenc
    , emulated_aesenclast
    ]
    false
    do {
      out          <- allocArrayOut "out" 4 i32;
      (in_,val_in) <- allocArrayIn "in"   4 i32;
      (ks,val_ks)  <- allocArrayIn "ks"  44 i32;
      crucible_execute_func [ out, in_, ks ];
      pointsTo out {{ withState (encryptState128 (unflatShedule val_ks)) val_in }};
    }
    (unint_z3 [ "aes_round", "AESFinalRound" ]);


let {{

from64 : [2][64] -> [128]
from64 [x,y]= y # x

to64 : [128] -> [2][64]
to64 (x # y) = [y,x]

from64s : {n} (fin n) => [2*n][64] -> [n][128]
from64s xs = [ from64 arr | arr <- split xs ]

}};

gfmul_int <-
  proof
    proving "gfmul_int"
    c_code
    "gfmul_int"
    [vclmul_emulator]
    false
    do {
      (a,val_a) <- allocArrayIn "a" 2 i64;
      (b,val_b) <- allocArrayIn "b" 2 i64;
      // We only every call this with the first and last argument aliased,
      // which is why we just prove this case.
      crucible_execute_func [ a, b, a ];
      pointsTo a {{ to64 (dot (from64 val_a) (from64 val_b)) }};
    }
    rme;


let provePOLYVAL n =
  proof
    proving (str_concat "POLYVAL, input size = " (show n))
    c_code
    "POLYVAL"
    [ vclmul_emulator, gfmul_int ]
    false
    do {
      (input,val_input)   <- allocArrayIn "input" n  i64;
      (H,val_H)           <- allocArrayIn "H"     2  i64;
      (result,val_result) <- allocArrayIn "result" 2 i64;
      crucible_execute_func [ input, H, crucible_term {{ 8 * `n : [64] }}
                                      , result ];
      pointsTo result {{ to64 (polyvalFrom (from64 val_H)
                                           (from64s val_input)
                                           (from64 val_result)) }};
    }
    abc;


let msg_size_bytes = 24;
let aad_size_bytes = 36;

// Map number of bytes to size of array of i64, so that we have complete blocks.
let bytesToBlocks x = eval_size {| 2 * ((8 * x) /^ 128) |};

// Increase number of bytes to next 16-byte (i.e.,block) boundary.
let paddedToBlock n = eval_size {| n + (n %^ 16) |};


polyval_msg <- provePOLYVAL (bytesToBlocks msg_size_bytes);
polyval_aad <- provePOLYVAL (bytesToBlocks aad_size_bytes);
polyval_len <- provePOLYVAL 2;


AES_128_CTR <-
  proof
    proving "AES_128_CTR"
    c_code
    "AES_128_CTR"
    [ AES_128_Encrypt ]
    false
    do {
      let paddedMsg = paddedToBlock msg_size_bytes;
      out            <- allocArrayOut "out" paddedMsg i8;
      (in', val_in') <- allocArrayIn  "in"  paddedMsg i8;
      (CTR, val_CTR) <- allocArrayIn  "CTR" 4              i32;
      let len = crucible_term {{ `paddedMsg: [32] }};
      (ks, val_ks)   <- allocArrayIn "ks"  44 i32;
      crucible_execute_func [out,in',CTR, len, ks];
      pointsTo out
        {{ split`{paddedMsg,8}
             (unblockify (counter_mode ksch (upper,lower) msg)
                 where
                 msg           = blockify (join val_in')
                 upper # lower = join (reverse val_CTR)
                 ksch          = unflatShedule val_ks
            )
        }};
    }
    (unint_z3 ["encryptState"]);


GCM_SIV_ENC_2_Keys <-
  proof
    proving "GCM_SIV_ENC_2_Keys"
    c_code
    "GCM_SIV_ENC_2_Keys"
    [ AES_128_Key_Expansion
    , AES_128_Encrypt
    , AES_128_CTR
    , polyval_len
    , polyval_aad
    , polyval_msg
    ]
    false
    do {
      let paddedMsg = paddedToBlock msg_size_bytes;
      CT            <- allocArrayOut "CT"  paddedMsg i8;
      TAG           <- allocArrayOut "TAG" 16        i8;
      (K1,val_K1)   <- allocArrayIn  "K1"  16        i8;
      (N,val_N)     <- allocArrayIn  "N"   12        i8;
      (AAD,val_AAD) <- allocArrayIn  "AAD" (paddedToBlock aad_size_bytes) i8;
      (MSG,val_MSG) <- allocArrayIn  "MSG" paddedMsg i8;

      crucible_precond {{ drop`{aad_size_bytes} val_AAD == zero }};
      crucible_precond {{ drop`{msg_size_bytes} val_MSG == zero }};

      crucible_execute_func [ CT, TAG, K1, N, AAD, MSG
                            , crucible_term  {{ `aad_size_bytes : [64] }}
                            , crucible_term  {{ `msg_size_bytes : [64] }} ];

      result <- crucible_fresh_var "msg_padding" (llvm_array paddedMsg i8);

      let posts = {{ (split`{msg_size_bytes,8} ct,  split`{16,8} (byteSwap tag))

          where
          N_bits  = byteSwap (join val_N)
          K1_bits = byteSwap (join val_K1)
          keys = derive_key K1_bits N_bits
          (ct,tag) = gcm_siv_plus
                      keys
                      N_bits
                      (join (take`{aad_size_bytes} val_AAD))
                      (join (take`{msg_size_bytes} val_MSG))

        }};

      pointsTo CT  result;
      crucible_postcond {{ take result == posts.0 }};
      pointsTo TAG {{ posts.1 }};
    }
    (unint_z3 [ "counter_mode", "expandKey", "AESFinalRound", "aes_round"
              , "dot" ]);

