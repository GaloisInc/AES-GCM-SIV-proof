
let {{
// Our algorithm is grouped by rows, but the C one uses columns, hence the 'transpose'
toState : [4][32] -> State
toState cols = transpose [ toBytes col | col <- cols ]

// Our state to the C represenation of the state.
fromState : State -> [4][32]
fromState rows = [ fromBytes col | col <- transpose rows ]

withState : (State -> State) -> [4][32] -> [4][32]
withState f x = fromState (f (toState x))


// Key schedule representation

flatSchedule : KeySchedule -> [44][32]
flatSchedule (first,rounds,last) = join [ fromState s | s <- [first] # rounds # [last] ]

unflatShedule : [44][32] -> KeySchedule
unflatShedule (first # rounds # last) =
  ( toState first
  , [ toState r | r <- split rounds ]
  , toState last
  )
}};


emulated_aesenc_substitute_bytes <-
  proving "emulated_aesenc_substitute_bytes" (
  crucible_llvm_verify
   c_code
   "emulated_aesenc_substitute_bytes"
   []
   false
   do { (ptr_data, data) <- allocVal "data" "[4 x i32]";
        crucible_execute_func [ ptr_data ];
        crucible_points_to ptr_data
                           (crucible_term {{ withState sub_bytes data }});
        crucible_return (crucible_term {{ 1 : [32] }});
      }
  rme
);


emulated_aesenc_row_shifting <-
  proving "emulated_aesenc_row_shifting" (
  crucible_llvm_verify
    c_code
    "emulated_aesenc_row_shifting"
    []
    false
    do {
      (ptr_data, data) <- allocVal "data" "[4 x i32]";
      crucible_execute_func [ ptr_data ];
      crucible_points_to ptr_data
                         (crucible_term  {{ withState shift_rows data }});
      crucible_return (crucible_term {{ 1 : [32] }});
    }
    z3
);


