let allocArg name ty = crucible_fresh_var name ty;

let pointsTo x y = crucible_points_to x (crucible_term y);
let returns x    = crucible_return (crucible_term x);

let allocPtrIn name ty =
  do { val <- allocArg name ty;
       ptr <- crucible_alloc ty;
       pointsTo ptr val;
       return (ptr,val);
     };

let allocArrayIn  name elN elT = allocPtrIn name (llvm_array elN elT);
let allocArrayOut name elN elT = crucible_alloc (llvm_array elN elT);

let i8  = llvm_int 8;
let i16 = llvm_int 16;
let i32 = llvm_int 32;
let i64 = llvm_int 64;


let skipping = false;
let proving = true;

let proof really msg code func ovewrite withPaths setup prover =
  do { let action = if really then "Proving " else "Skipping ";
       print (str_concat action msg);
       if really
         then time (
                crucible_llvm_verify code func ovewrite withPaths setup prover
              )
         else crucible_llvm_unsafe_assume_spec code func setup;
     };




let {{
// To little endian byte representation
toBytes : {n} (fin n) => [8 * n] -> [n][8]
toBytes bits = reverse (split bits)

// A litle endian bytes, to a bit vector.
fromBytes : {n} (fin n) => [n][8] -> [8 * n]
fromBytes bytes = join (reverse bytes)


}};



