module AES where

import `Common::AES
import `Common::AES as AES

type constraint ValidKey k m = (k == 128 + m * 64, 2 >= m)

encrypt : {k,m} ValidKey k m => [k] -> [128] -> [128]
encrypt = aesEncrypt`{Mode = m}

decrypt : {k,m} ValidKey k m => [k] -> [128] -> [128]
decrypt = aesDecrypt`{Mode = m}

sub_bytes : State -> State
sub_bytes = SubBytes`{0}

shift_rows : State -> State
shift_rows = ShiftRows`{0}

type State = AES::State 0  /* 0 is unused */


